# Generated from Spock.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,25,350,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,1,0,1,0,1,0,
        1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,
        1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,
        1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,
        1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
        10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,
        12,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,16,1,
        16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,3,17,264,8,17,1,18,1,18,1,18,1,18,1,18,1,18,1,18,5,
        18,273,8,18,10,18,12,18,276,9,18,1,18,1,18,1,18,1,18,1,18,1,18,1,
        18,1,18,1,19,4,19,287,8,19,11,19,12,19,288,1,20,4,20,292,8,20,11,
        20,12,20,293,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,5,21,305,
        8,21,10,21,12,21,308,9,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,5,22,320,8,22,10,22,12,22,323,9,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,23,4,23,337,8,23,11,23,12,23,
        338,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,1,24,1,24,2,274,321,
        0,25,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,1,0,29,2,0,80,80,112,112,2,0,82,82,114,114,2,0,73,73,105,
        105,2,0,78,78,110,110,2,0,84,84,116,116,2,0,69,69,101,101,2,0,85,
        85,117,117,2,0,66,66,98,98,2,0,71,71,103,103,2,0,70,70,102,102,2,
        0,83,83,115,115,2,0,72,72,104,104,2,0,68,68,100,100,2,0,67,67,99,
        99,2,0,76,76,108,108,2,0,65,65,97,97,2,0,81,81,113,113,2,0,87,87,
        119,119,2,0,77,77,109,109,2,0,75,75,107,107,2,0,79,79,111,111,2,
        0,90,90,122,122,2,0,86,86,118,118,2,0,88,88,120,120,2,0,89,89,121,
        121,1,0,48,57,2,0,65,90,97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,
        32,375,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,
        0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,
        0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,
        0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,
        0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,
        0,1,51,1,0,0,0,3,57,1,0,0,0,5,64,1,0,0,0,7,70,1,0,0,0,9,77,1,0,0,
        0,11,85,1,0,0,0,13,92,1,0,0,0,15,99,1,0,0,0,17,105,1,0,0,0,19,108,
        1,0,0,0,21,115,1,0,0,0,23,121,1,0,0,0,25,126,1,0,0,0,27,131,1,0,
        0,0,29,135,1,0,0,0,31,139,1,0,0,0,33,142,1,0,0,0,35,263,1,0,0,0,
        37,265,1,0,0,0,39,286,1,0,0,0,41,291,1,0,0,0,43,295,1,0,0,0,45,311,
        1,0,0,0,47,336,1,0,0,0,49,342,1,0,0,0,51,52,7,0,0,0,52,53,7,1,0,
        0,53,54,7,2,0,0,54,55,7,3,0,0,55,56,7,4,0,0,56,2,1,0,0,0,57,58,7,
        1,0,0,58,59,7,5,0,0,59,60,7,4,0,0,60,61,7,6,0,0,61,62,7,1,0,0,62,
        63,7,3,0,0,63,4,1,0,0,0,64,65,7,7,0,0,65,66,7,5,0,0,66,67,7,8,0,
        0,67,68,7,2,0,0,68,69,7,3,0,0,69,6,1,0,0,0,70,71,7,9,0,0,71,72,7,
        2,0,0,72,73,7,3,0,0,73,74,7,2,0,0,74,75,7,10,0,0,75,76,7,11,0,0,
        76,8,1,0,0,0,77,78,7,12,0,0,78,79,7,5,0,0,79,80,7,13,0,0,80,81,7,
        14,0,0,81,82,7,15,0,0,82,83,7,1,0,0,83,84,7,5,0,0,84,10,1,0,0,0,
        85,86,7,12,0,0,86,87,7,5,0,0,87,88,7,9,0,0,88,89,7,2,0,0,89,90,7,
        3,0,0,90,91,7,5,0,0,91,12,1,0,0,0,92,93,7,5,0,0,93,94,7,16,0,0,94,
        95,7,6,0,0,95,96,7,15,0,0,96,97,7,14,0,0,97,98,7,10,0,0,98,14,1,
        0,0,0,99,100,7,17,0,0,100,101,7,11,0,0,101,102,7,2,0,0,102,103,7,
        14,0,0,103,104,7,5,0,0,104,16,1,0,0,0,105,106,7,2,0,0,106,107,7,
        9,0,0,107,18,1,0,0,0,108,109,7,14,0,0,109,110,7,15,0,0,110,111,7,
        18,0,0,111,112,7,7,0,0,112,113,7,12,0,0,113,114,7,15,0,0,114,20,
        1,0,0,0,115,116,7,4,0,0,116,117,7,15,0,0,117,118,7,19,0,0,118,119,
        7,5,0,0,119,120,7,10,0,0,120,22,1,0,0,0,121,122,7,12,0,0,122,123,
        7,20,0,0,123,124,7,5,0,0,124,125,7,10,0,0,125,24,1,0,0,0,126,127,
        7,13,0,0,127,128,7,15,0,0,128,129,7,14,0,0,129,130,7,14,0,0,130,
        26,1,0,0,0,131,132,7,15,0,0,132,133,7,3,0,0,133,134,7,12,0,0,134,
        28,1,0,0,0,135,136,7,10,0,0,136,137,7,5,0,0,137,138,7,4,0,0,138,
        30,1,0,0,0,139,140,7,15,0,0,140,141,7,10,0,0,141,32,1,0,0,0,142,
        143,7,17,0,0,143,144,7,2,0,0,144,145,7,4,0,0,145,146,7,11,0,0,146,
        34,1,0,0,0,147,148,7,21,0,0,148,149,7,5,0,0,149,150,7,1,0,0,150,
        264,7,20,0,0,151,152,7,20,0,0,152,153,7,3,0,0,153,264,7,5,0,0,154,
        155,7,4,0,0,155,156,7,17,0,0,156,264,7,20,0,0,157,158,7,4,0,0,158,
        159,7,11,0,0,159,160,7,1,0,0,160,161,7,5,0,0,161,264,7,5,0,0,162,
        163,7,9,0,0,163,164,7,20,0,0,164,165,7,6,0,0,165,264,7,1,0,0,166,
        167,7,9,0,0,167,168,7,2,0,0,168,169,7,22,0,0,169,264,7,5,0,0,170,
        171,7,10,0,0,171,172,7,2,0,0,172,264,7,23,0,0,173,174,7,10,0,0,174,
        175,7,5,0,0,175,176,7,22,0,0,176,177,7,5,0,0,177,264,7,3,0,0,178,
        179,7,5,0,0,179,180,7,2,0,0,180,181,7,8,0,0,181,182,7,11,0,0,182,
        264,7,4,0,0,183,184,7,3,0,0,184,185,7,2,0,0,185,186,7,3,0,0,186,
        264,7,5,0,0,187,188,7,4,0,0,188,189,7,5,0,0,189,264,7,3,0,0,190,
        191,7,5,0,0,191,192,7,14,0,0,192,193,7,5,0,0,193,194,7,22,0,0,194,
        195,7,5,0,0,195,264,7,3,0,0,196,197,7,4,0,0,197,198,7,17,0,0,198,
        199,7,5,0,0,199,200,7,14,0,0,200,201,7,22,0,0,201,264,7,5,0,0,202,
        203,7,4,0,0,203,204,7,11,0,0,204,205,7,2,0,0,205,206,7,1,0,0,206,
        207,7,4,0,0,207,208,7,5,0,0,208,209,7,5,0,0,209,264,7,3,0,0,210,
        211,7,9,0,0,211,212,7,20,0,0,212,213,7,6,0,0,213,214,7,1,0,0,214,
        215,7,4,0,0,215,216,7,5,0,0,216,217,7,5,0,0,217,264,7,3,0,0,218,
        219,7,9,0,0,219,220,7,2,0,0,220,221,7,9,0,0,221,222,7,4,0,0,222,
        223,7,5,0,0,223,224,7,5,0,0,224,264,7,3,0,0,225,226,7,10,0,0,226,
        227,7,2,0,0,227,228,7,23,0,0,228,229,7,4,0,0,229,230,7,5,0,0,230,
        231,7,5,0,0,231,264,7,3,0,0,232,233,7,10,0,0,233,234,7,5,0,0,234,
        235,7,22,0,0,235,236,7,5,0,0,236,237,7,3,0,0,237,238,7,4,0,0,238,
        239,7,5,0,0,239,240,7,5,0,0,240,264,7,3,0,0,241,242,7,5,0,0,242,
        243,7,2,0,0,243,244,7,8,0,0,244,245,7,11,0,0,245,246,7,4,0,0,246,
        247,7,5,0,0,247,248,7,5,0,0,248,264,7,3,0,0,249,250,7,3,0,0,250,
        251,7,2,0,0,251,252,7,3,0,0,252,253,7,5,0,0,253,254,7,4,0,0,254,
        255,7,5,0,0,255,256,7,5,0,0,256,264,7,3,0,0,257,258,7,4,0,0,258,
        259,7,17,0,0,259,260,7,5,0,0,260,261,7,3,0,0,261,262,7,4,0,0,262,
        264,7,24,0,0,263,147,1,0,0,0,263,151,1,0,0,0,263,154,1,0,0,0,263,
        157,1,0,0,0,263,162,1,0,0,0,263,166,1,0,0,0,263,170,1,0,0,0,263,
        173,1,0,0,0,263,178,1,0,0,0,263,183,1,0,0,0,263,187,1,0,0,0,263,
        190,1,0,0,0,263,196,1,0,0,0,263,202,1,0,0,0,263,210,1,0,0,0,263,
        218,1,0,0,0,263,225,1,0,0,0,263,232,1,0,0,0,263,241,1,0,0,0,263,
        249,1,0,0,0,263,257,1,0,0,0,264,36,1,0,0,0,265,266,7,16,0,0,266,
        267,7,6,0,0,267,268,7,20,0,0,268,269,7,4,0,0,269,270,7,5,0,0,270,
        274,1,0,0,0,271,273,9,0,0,0,272,271,1,0,0,0,273,276,1,0,0,0,274,
        275,1,0,0,0,274,272,1,0,0,0,275,277,1,0,0,0,276,274,1,0,0,0,277,
        278,7,6,0,0,278,279,7,3,0,0,279,280,7,16,0,0,280,281,7,6,0,0,281,
        282,7,20,0,0,282,283,7,4,0,0,283,284,7,5,0,0,284,38,1,0,0,0,285,
        287,7,25,0,0,286,285,1,0,0,0,287,288,1,0,0,0,288,286,1,0,0,0,288,
        289,1,0,0,0,289,40,1,0,0,0,290,292,7,26,0,0,291,290,1,0,0,0,292,
        293,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,42,1,0,0,0,295,296,
        7,13,0,0,296,297,7,20,0,0,297,298,7,18,0,0,298,299,7,18,0,0,299,
        300,7,5,0,0,300,301,7,3,0,0,301,302,7,4,0,0,302,306,1,0,0,0,303,
        305,8,27,0,0,304,303,1,0,0,0,305,308,1,0,0,0,306,304,1,0,0,0,306,
        307,1,0,0,0,307,309,1,0,0,0,308,306,1,0,0,0,309,310,6,21,0,0,310,
        44,1,0,0,0,311,312,7,5,0,0,312,313,7,10,0,0,313,314,7,13,0,0,314,
        315,7,15,0,0,315,316,7,0,0,0,316,317,7,5,0,0,317,321,1,0,0,0,318,
        320,9,0,0,0,319,318,1,0,0,0,320,323,1,0,0,0,321,322,1,0,0,0,321,
        319,1,0,0,0,322,324,1,0,0,0,323,321,1,0,0,0,324,325,7,6,0,0,325,
        326,7,3,0,0,326,327,7,5,0,0,327,328,7,10,0,0,328,329,7,13,0,0,329,
        330,7,15,0,0,330,331,7,0,0,0,331,332,7,5,0,0,332,333,1,0,0,0,333,
        334,6,22,0,0,334,46,1,0,0,0,335,337,7,28,0,0,336,335,1,0,0,0,337,
        338,1,0,0,0,338,336,1,0,0,0,338,339,1,0,0,0,339,340,1,0,0,0,340,
        341,6,23,0,0,341,48,1,0,0,0,342,343,7,9,0,0,343,344,7,14,0,0,344,
        345,7,6,0,0,345,346,7,10,0,0,346,347,7,11,0,0,347,348,1,0,0,0,348,
        349,6,24,0,0,349,50,1,0,0,0,8,0,263,274,288,293,306,321,338,1,6,
        0,0
    ]

class SpockLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PRINT = 1
    RETURN = 2
    BEGIN = 3
    FINISH = 4
    DECLARE = 5
    DEFINE = 6
    EQUALS = 7
    WHILE = 8
    IF = 9
    LAMBDA = 10
    TAKES = 11
    DOES = 12
    CALL = 13
    AND = 14
    SET = 15
    AS = 16
    WITH = 17
    WORD_NUMBER = 18
    STRING = 19
    NUMBER = 20
    ID_PART = 21
    COMMENT = 22
    MULTILINE_COMMENT = 23
    WS = 24
    FLUSH = 25

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'print'", "'return'", "'begin'", "'finish'", "'declare'", "'define'", 
            "'equals'", "'while'", "'if'", "'lambda'", "'takes'", "'does'", 
            "'call'", "'and'", "'set'", "'as'", "'with'", "'flush'" ]

    symbolicNames = [ "<INVALID>",
            "PRINT", "RETURN", "BEGIN", "FINISH", "DECLARE", "DEFINE", "EQUALS", 
            "WHILE", "IF", "LAMBDA", "TAKES", "DOES", "CALL", "AND", "SET", 
            "AS", "WITH", "WORD_NUMBER", "STRING", "NUMBER", "ID_PART", 
            "COMMENT", "MULTILINE_COMMENT", "WS", "FLUSH" ]

    ruleNames = [ "PRINT", "RETURN", "BEGIN", "FINISH", "DECLARE", "DEFINE", 
                  "EQUALS", "WHILE", "IF", "LAMBDA", "TAKES", "DOES", "CALL", 
                  "AND", "SET", "AS", "WITH", "WORD_NUMBER", "STRING", "NUMBER", 
                  "ID_PART", "COMMENT", "MULTILINE_COMMENT", "WS", "FLUSH" ]

    grammarFileName = "Spock.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


